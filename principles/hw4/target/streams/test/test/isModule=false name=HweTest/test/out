[0m[[0m[0minfo[0m] [0m[0m[32mHweTest:[0m[0m
[0m[[0m[0minfo[0m] [0m[0m[32m- GcTest env: HashMap(), mem: Mem(HashMap(LocVal(3) -> IntVal(13), LocVal(5) -> IntVal(9), LocVal(1) -> IntVal(10), LocVal(4) -> IntVal(21), LocVal(2) -> IntVal(13)),6)[0m[0m
[0m[[0m[0minfo[0m] [0m[0m[32m- GcTest env: HashMap(Var("temp") -> LocVal(2), Var("x") -> LocVal(1), Var("y") -> LocVal(5), Var("ret") -> LocVal(4), Var("p") -> LocVal(3)), mem: Mem(HashMap(LocVal(3) -> IntVal(13), LocVal(5) -> IntVal(9), LocVal(1) -> IntVal(10), LocVal(4) -> IntVal(21), LocVal(0) -> ProcVal(List(Var("x")),Ite(LTEExpr(Var("x"),Const(0)),Const(0),Ite(LTEExpr(Var("x"),Const(2)),Const(1),Let(Var("temp"),Const(1),Let(Var("p"),Const(1),Let(Var("ret"),Const(1),Let(Var("y"),Const(3),Block(BeginEnd(WhileExpr(LTEExpr(Var("y"),Var("x")),BeginEnd(Block(Block(Block(Asn(Var("temp"),Var("ret")),Asn(Var("ret"),Add(Var("p"),Var("ret")))),Asn(Var("p"),Var("temp"))),Asn(Var("y"),Add(Var("y"),Const(1))))))),Var("ret")))))))),HashMap()), LocVal(2) -> IntVal(13)),6)[0m[0m
[0m[[0m[0minfo[0m] [0m[0m[32m- GcTest env: HashMap(Var("temp") -> LocVal(2)), mem: Mem(HashMap(LocVal(3) -> IntVal(13), LocVal(5) -> IntVal(9), LocVal(1) -> IntVal(10), LocVal(4) -> IntVal(21), LocVal(2) -> IntVal(13)),6)[0m[0m
[0m[[0m[0minfo[0m] [0m[0m[32m- GcTest env: HashMap(Var("temp") -> LocVal(2)), mem: Mem(HashMap(LocVal(3) -> IntVal(13), LocVal(5) -> IntVal(9), LocVal(1) -> IntVal(10), LocVal(4) -> IntVal(21), LocVal(2) -> LocVal(3)),6)[0m[0m
[0m[[0m[0minfo[0m] [0m[0m[32m- GcTest env: HashMap(Var("temp") -> LocVal(2)), mem: Mem(HashMap(LocVal(3) -> RecordVal(Var("x"),LocVal(5),EmptyRecordVal), LocVal(5) -> IntVal(9), LocVal(1) -> IntVal(10), LocVal(4) -> IntVal(21), LocVal(2) -> LocVal(3)),6)[0m[0m
[0m[[0m[0minfo[0m] [0m[0m[32m- test with expected result: SkipVal input: skip[0m[0m
[0m[[0m[0minfo[0m] [0m[0m[32m- test with expected result: BoolVal(true) input: true[0m[0m
[0m[[0m[0minfo[0m] [0m[0m[32m- test with expected result: BoolVal(false) input: false[0m[0m
[0m[[0m[0minfo[0m] [0m[0m[32m- test with expected result: IntVal(1) input: let x = 1 in x[0m[0m
[0m[[0m[0minfo[0m] [0m[0m[32m- test with expected result: IntVal(1) input: 1[0m[0m
[0m[[0m[0minfo[0m] [0m[0m[32m- test with expected result: IntVal(2) input: 1 + 1[0m[0m
[0m[[0m[0minfo[0m] [0m[0m[32m- test with expected result: IntVal(0) input: 1 - 1[0m[0m
[0m[[0m[0minfo[0m] [0m[0m[32m- test with expected result: IntVal(1) input: 1 * 1[0m[0m
[0m[[0m[0minfo[0m] [0m[0m[32m- test with expected result: IntVal(1) input: 1 / 1[0m[0m
[0m[[0m[0minfo[0m] [0m[0m[32m- test with expected result: BoolVal(false) input: 1 == 0[0m[0m
[0m[[0m[0minfo[0m] [0m[0m[32m- test with expected result: BoolVal(true) input: 1 == 1[0m[0m
[0m[[0m[0minfo[0m] [0m[0m[32m- test with expected result: BoolVal(false) input: 1 <= 0[0m[0m
[0m[[0m[0minfo[0m] [0m[0m[32m- test with expected result: BoolVal(true) input: 1 <= 10[0m[0m
[0m[[0m[0minfo[0m] [0m[0m[32m- test with expected result: BoolVal(false) input: not true[0m[0m
[0m[[0m[0minfo[0m] [0m[0m[32m- test with expected result: BoolVal(true) input: not false[0m[0m
[0m[[0m[0minfo[0m] [0m[0m[32m- test with expected result: BoolVal(false) input: not 1 == 1[0m[0m
[0m[[0m[0minfo[0m] [0m[0m[32m- test with expected result: BoolVal(true) input: not 1 == 2[0m[0m
[0m[[0m[0minfo[0m] [0m[0m[32m- test with expected result: IntVal(1) input: if true then 1 else 2[0m[0m
[0m[[0m[0minfo[0m] [0m[0m[32m- test with expected result: IntVal(2) input: if false then 1 else 2[0m[0m
[0m[[0m[0minfo[0m] [0m[0m[32m- test with expected result: IntVal(11) input: let x = 0 in begin while x <= 10 x := x + 1 end ; x [0m[0m
[0m[[0m[0minfo[0m] [0m[0m[32m- test with expected result: IntVal(0) input: let x = 0 in begin while false x := x + 1 end ; x [0m[0m
[0m[[0m[0minfo[0m] [0m[0m[32m- test with expected result: IntVal(2) input: let x = 1 in x+1[0m[0m
[0m[[0m[0minfo[0m] [0m[0m[32m- test with expected result: ProcVal(List(Var("x")),Add(Var("x"),Const(10)),HashMap()) input: proc (x) x + 10[0m[0m
[0m[[0m[0minfo[0m] [0m[0m[32m- test with expected result: ProcVal(List(Var("x"), Var("y")),Add(Add(Var("x"),Var("y")),Const(10)),HashMap()) input: proc (x,y) x + y + 10[0m[0m
[0m[[0m[0minfo[0m] [0m[0m[32m- test with expected result: ProcVal(List(Var("x"), Var("z")),Add(Add(Var("x"),Var("x")),Const(10)),HashMap()) input: proc (x,z) x + x + 10[0m[0m
[0m[[0m[0minfo[0m] [0m[0m[32m- test with expected result: IntVal(13) input: let f = proc (x,y)  x + y + 10 in f (1,2)[0m[0m
[0m[[0m[0minfo[0m] [0m[0m[32m- test with expected result: IntVal(11) input: let f = proc (x)  x  + 10 in f (1)[0m[0m
[0m[[0m[0minfo[0m] [0m[0m[32m- test with expected result: IntVal(20) input: let f = proc (x)  x  + 10 in let y = 10 in f <y>[0m[0m
[0m[[0m[0minfo[0m] [0m[0m[32m- test with expected result: IntVal(5) input: let f = proc (x)  x := 5 in let y = 10 in begin f <y>; y end[0m[0m
[0m[[0m[0minfo[0m] [0m[0m[32m- test with expected result: IntVal(15) input: let f = proc (x,y)  x - y + 10 in let y = 10 in let z = 5 in f <y,z>[0m[0m
[0m[[0m[0minfo[0m] [0m[0m[32m- test with expected result: IntVal(10) input: let f = proc (x)  x := 5 in let y = 10 in begin f (y); y end[0m[0m
[0m[[0m[0minfo[0m] [0m[0m[32m- test with expected result: IntVal(11) input: let x = 10 in x := 11[0m[0m
[0m[[0m[0minfo[0m] [0m[0m[32m- test with expected result: SkipVal input: let x = 10 in x := skip[0m[0m
[0m[[0m[0minfo[0m] [0m[0m[32m- test with expected result: EmptyRecordVal input: {}[0m[0m
[0m[[0m[0minfo[0m] [0m[0m[32m- test with expected result: RecordVal(Var("x"),LocVal(0),EmptyRecordVal) input: {x := 1}[0m[0m
[0m[[0m[0minfo[0m] [0m[0m[32m- test with expected result: RecordVal(Var("y"),LocVal(0),RecordVal(Var("x"),LocVal(1),EmptyRecordVal)) input: {y := 1, x := 1}[0m[0m
[0m[[0m[0minfo[0m] [0m[0m[32m- test with expected result: IntVal(3) input: let z = 1 in begin {y := z := 0, x := z := 3}; z end[0m[0m
[0m[[0m[0minfo[0m] [0m[0m[32m- test with expected result: IntVal(1) input: let r = {x:=1,y:=2} in r.x[0m[0m
[0m[[0m[0minfo[0m] [0m[0m[32m- test with expected result: IntVal(3) input: let r = {x:=1,y:={z:=3}} in r.y.z[0m[0m
[0m[[0m[0minfo[0m] [0m[0m[32m- test with expected result: IntVal(1) input: let r = {x:=1,y:={z:=3}} in r.y := 1[0m[0m
[0m[[0m[0minfo[0m] [0m[0m[32m- test with expected result: IntVal(1) input: let r = {x:=1,y:={z:=3}} in begin r.y := 1; r.y end[0m[0m
[0m[[0m[0minfo[0m] [0m[0m[32m- test with expected result: IntVal(1) input: begin {x:=1,y:={z:=3}} end . y := 1[0m[0m
[0m[[0m[0minfo[0m] [0m[0m[32m- test with expected result: IntVal(2) input: let z = 1 in begin {x:=1,y:={k:=z := 2}} end . y := z[0m[0m
[0m[[0m[0minfo[0m] [0m[0m[32m- test with expected result: IntVal(1) input: if 0 <= 1 then 1 else 2[0m[0m
[0m[[0m[0minfo[0m] [0m[0m[32m- test with expected result: IntVal(0) input: let fibo = [0m[0m
[0m[[0m[0minfo[0m] [0m[0m[32mproc (x)[0m[0m
[0m[[0m[0minfo[0m] [0m[0m[32m    if x <= 0 then 0 else[0m[0m
[0m[[0m[0minfo[0m] [0m[0m[32m      if x <= 2 then 1 else[0m[0m
[0m[[0m[0minfo[0m] [0m[0m[32m        let temp = 1 in[0m[0m
[0m[[0m[0minfo[0m] [0m[0m[32m        let p = 1 in[0m[0m
[0m[[0m[0minfo[0m] [0m[0m[32m        let ret = 1 in[0m[0m
[0m[[0m[0minfo[0m] [0m[0m[32m        let y = 3 in[0m[0m
[0m[[0m[0minfo[0m] [0m[0m[32m        begin while y <= x[0m[0m
[0m[[0m[0minfo[0m] [0m[0m[32m          begin[0m[0m
[0m[[0m[0minfo[0m] [0m[0m[32m            temp := ret;[0m[0m
[0m[[0m[0minfo[0m] [0m[0m[32m            ret := p + ret;[0m[0m
[0m[[0m[0minfo[0m] [0m[0m[32m            p := temp;[0m[0m
[0m[[0m[0minfo[0m] [0m[0m[32m            y := y + 1[0m[0m
[0m[[0m[0minfo[0m] [0m[0m[32m          end end;[0m[0m
[0m[[0m[0minfo[0m] [0m[0m[32m        ret[0m[0m
[0m[[0m[0minfo[0m] [0m[0m[32m         in fibo (0)[0m[0m
[0m[[0m[0minfo[0m] [0m[0m[32m- test with expected result: IntVal(1) input: let fibo = [0m[0m
[0m[[0m[0minfo[0m] [0m[0m[32mproc (x)[0m[0m
[0m[[0m[0minfo[0m] [0m[0m[32m    if x <= 0 then 0 else[0m[0m
[0m[[0m[0minfo[0m] [0m[0m[32m      if x <= 2 then 1 else[0m[0m
[0m[[0m[0minfo[0m] [0m[0m[32m        let temp = 1 in[0m[0m
[0m[[0m[0minfo[0m] [0m[0m[32m        let p = 1 in[0m[0m
[0m[[0m[0minfo[0m] [0m[0m[32m        let ret = 1 in[0m[0m
[0m[[0m[0minfo[0m] [0m[0m[32m        let y = 3 in[0m[0m
[0m[[0m[0minfo[0m] [0m[0m[32m        begin while y <= x[0m[0m
[0m[[0m[0minfo[0m] [0m[0m[32m          begin[0m[0m
[0m[[0m[0minfo[0m] [0m[0m[32m            temp := ret;[0m[0m
[0m[[0m[0minfo[0m] [0m[0m[32m            ret := p + ret;[0m[0m
[0m[[0m[0minfo[0m] [0m[0m[32m            p := temp;[0m[0m
[0m[[0m[0minfo[0m] [0m[0m[32m            y := y + 1[0m[0m
[0m[[0m[0minfo[0m] [0m[0m[32m          end end;[0m[0m
[0m[[0m[0minfo[0m] [0m[0m[32m        ret[0m[0m
[0m[[0m[0minfo[0m] [0m[0m[32m         in fibo (1)[0m[0m
[0m[[0m[0minfo[0m] [0m[0m[32m- test with expected result: IntVal(1) input: let fibo = [0m[0m
[0m[[0m[0minfo[0m] [0m[0m[32mproc (x)[0m[0m
[0m[[0m[0minfo[0m] [0m[0m[32m    if x <= 0 then 0 else[0m[0m
[0m[[0m[0minfo[0m] [0m[0m[32m      if x <= 2 then 1 else[0m[0m
[0m[[0m[0minfo[0m] [0m[0m[32m        let temp = 1 in[0m[0m
[0m[[0m[0minfo[0m] [0m[0m[32m        let p = 1 in[0m[0m
[0m[[0m[0minfo[0m] [0m[0m[32m        let ret = 1 in[0m[0m
[0m[[0m[0minfo[0m] [0m[0m[32m        let y = 3 in[0m[0m
[0m[[0m[0minfo[0m] [0m[0m[32m        begin while y <= x[0m[0m
[0m[[0m[0minfo[0m] [0m[0m[32m          begin[0m[0m
[0m[[0m[0minfo[0m] [0m[0m[32m            temp := ret;[0m[0m
[0m[[0m[0minfo[0m] [0m[0m[32m            ret := p + ret;[0m[0m
[0m[[0m[0minfo[0m] [0m[0m[32m            p := temp;[0m[0m
[0m[[0m[0minfo[0m] [0m[0m[32m            y := y + 1[0m[0m
[0m[[0m[0minfo[0m] [0m[0m[32m          end end;[0m[0m
[0m[[0m[0minfo[0m] [0m[0m[32m        ret[0m[0m
[0m[[0m[0minfo[0m] [0m[0m[32m         in fibo (2)[0m[0m
[0m[[0m[0minfo[0m] [0m[0m[32m- test with expected result: IntVal(2) input: let fibo = [0m[0m
[0m[[0m[0minfo[0m] [0m[0m[32mproc (x)[0m[0m
[0m[[0m[0minfo[0m] [0m[0m[32m    if x <= 0 then 0 else[0m[0m
[0m[[0m[0minfo[0m] [0m[0m[32m      if x <= 2 then 1 else[0m[0m
[0m[[0m[0minfo[0m] [0m[0m[32m        let temp = 1 in[0m[0m
[0m[[0m[0minfo[0m] [0m[0m[32m        let p = 1 in[0m[0m
[0m[[0m[0minfo[0m] [0m[0m[32m        let ret = 1 in[0m[0m
[0m[[0m[0minfo[0m] [0m[0m[32m        let y = 3 in[0m[0m
[0m[[0m[0minfo[0m] [0m[0m[32m        begin while y <= x[0m[0m
[0m[[0m[0minfo[0m] [0m[0m[32m          begin[0m[0m
[0m[[0m[0minfo[0m] [0m[0m[32m            temp := ret;[0m[0m
[0m[[0m[0minfo[0m] [0m[0m[32m            ret := p + ret;[0m[0m
[0m[[0m[0minfo[0m] [0m[0m[32m            p := temp;[0m[0m
[0m[[0m[0minfo[0m] [0m[0m[32m            y := y + 1[0m[0m
[0m[[0m[0minfo[0m] [0m[0m[32m          end end;[0m[0m
[0m[[0m[0minfo[0m] [0m[0m[32m        ret[0m[0m
[0m[[0m[0minfo[0m] [0m[0m[32m         in fibo (3)[0m[0m
[0m[[0m[0minfo[0m] [0m[0m[32m- test with expected result: IntVal(3) input: let fibo = [0m[0m
[0m[[0m[0minfo[0m] [0m[0m[32mproc (x)[0m[0m
[0m[[0m[0minfo[0m] [0m[0m[32m    if x <= 0 then 0 else[0m[0m
[0m[[0m[0minfo[0m] [0m[0m[32m      if x <= 2 then 1 else[0m[0m
[0m[[0m[0minfo[0m] [0m[0m[32m        let temp = 1 in[0m[0m
[0m[[0m[0minfo[0m] [0m[0m[32m        let p = 1 in[0m[0m
[0m[[0m[0minfo[0m] [0m[0m[32m        let ret = 1 in[0m[0m
[0m[[0m[0minfo[0m] [0m[0m[32m        let y = 3 in[0m[0m
[0m[[0m[0minfo[0m] [0m[0m[32m        begin while y <= x[0m[0m
[0m[[0m[0minfo[0m] [0m[0m[32m          begin[0m[0m
[0m[[0m[0minfo[0m] [0m[0m[32m            temp := ret;[0m[0m
[0m[[0m[0minfo[0m] [0m[0m[32m            ret := p + ret;[0m[0m
[0m[[0m[0minfo[0m] [0m[0m[32m            p := temp;[0m[0m
[0m[[0m[0minfo[0m] [0m[0m[32m            y := y + 1[0m[0m
[0m[[0m[0minfo[0m] [0m[0m[32m          end end;[0m[0m
[0m[[0m[0minfo[0m] [0m[0m[32m        ret[0m[0m
[0m[[0m[0minfo[0m] [0m[0m[32m         in fibo (4)[0m[0m
[0m[[0m[0minfo[0m] [0m[0m[32m- test with expected result: IntVal(55) input: let fibo = [0m[0m
[0m[[0m[0minfo[0m] [0m[0m[32mproc (x)[0m[0m
[0m[[0m[0minfo[0m] [0m[0m[32m    if x <= 0 then 0 else[0m[0m
[0m[[0m[0minfo[0m] [0m[0m[32m      if x <= 2 then 1 else[0m[0m
[0m[[0m[0minfo[0m] [0m[0m[32m        let temp = 1 in[0m[0m
[0m[[0m[0minfo[0m] [0m[0m[32m        let p = 1 in[0m[0m
[0m[[0m[0minfo[0m] [0m[0m[32m        let ret = 1 in[0m[0m
[0m[[0m[0minfo[0m] [0m[0m[32m        let y = 3 in[0m[0m
[0m[[0m[0minfo[0m] [0m[0m[32m        begin while y <= x[0m[0m
[0m[[0m[0minfo[0m] [0m[0m[32m          begin[0m[0m
[0m[[0m[0minfo[0m] [0m[0m[32m            temp := ret;[0m[0m
[0m[[0m[0minfo[0m] [0m[0m[32m            ret := p + ret;[0m[0m
[0m[[0m[0minfo[0m] [0m[0m[32m            p := temp;[0m[0m
[0m[[0m[0minfo[0m] [0m[0m[32m            y := y + 1[0m[0m
[0m[[0m[0minfo[0m] [0m[0m[32m          end end;[0m[0m
[0m[[0m[0minfo[0m] [0m[0m[32m        ret[0m[0m
[0m[[0m[0minfo[0m] [0m[0m[32m         in fibo (10)[0m[0m
